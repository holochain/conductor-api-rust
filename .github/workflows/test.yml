name: Test

on:
  pull_request:
  push:
    branches: [develop, main]

env:
  CARGO_TERM_COLOR: always

concurrency:
  group: ${{ github.ref_name }}
  cancel-in-progress: true

jobs:
  test:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4

      - name: Maximize build space
        uses: AdityaGarg8/remove-unwanted-software@v2
        if: startsWith(matrix.os, 'ubuntu')
        with:
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-codeql: 'true'
          remove-docker-images: 'true'

      - name: Install nix
        uses: cachix/install-nix-action@v25
        with:
          install_url: https://releases.nixos.org/nix/nix-2.20.4/install

      - name: Set up cachix
        uses: cachix/cachix-action@v14
        with:
          name: holochain-ci

      - name: Install nix packages
        run: nix develop -c $SHELL -c "holochain --version"

      - name: Restore fixture
        uses: actions/cache/restore@v4
        env:
          cache-name: fixture
        with:
          path: fixture/zomes/foo/target
          key: ${{ matrix.os }}-build-${{ env.cache-name }}-${{ hashFiles('fixture/zomes/foo/Cargo.lock') }}

      - name: Build fixture
        run: nix develop -c $SHELL -c "./build-fixture.sh"

      - name: Save fixture to cache
        uses: actions/cache/save@v4
        env:
          cache-name: fixture
        with:
          path: fixture/zomes/foo/target
          key: ${{ matrix.os }}-build-${{ env.cache-name }}-${{ hashFiles('fixture/zomes/foo/Cargo.lock') }}

      - name: Restore client build
        uses: actions/cache/restore@v4
        env:
          cache-name: client
        with:
          path: target
          key: ${{ matrix.os }}-cargo-${{ env.cache-name }}-${{ hashFiles('Cargo.lock') }}

      - name: Build client
        run: cargo build -p holochain_client

      - name: Save client build to cache
        uses: actions/cache/save@v4
        env:
          cache-name: client
        with:
          path: target
          key: ${{ matrix.os }}-cargo-${{ env.cache-name }}-${{ hashFiles('Cargo.lock') }}

      - name: Lint
        run: cargo clippy --all-features -- -D warnings

      - name: Check formatting
        run: cargo fmt --all --check

      - name: Run tests
        run: cargo test

      - name: Verify feature independence
        run: |
          cargo build --no-default-features
          cargo build --no-default-features --features "lair_signing"

      - name: Setup tmate session if build and test run failed
        if: ${{ failure() }}
        uses: mxschmitt/action-tmate@v3
